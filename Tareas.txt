Lista de tareas:

(Irri) Implementar búsqueda local despues del greedy

(Ignacio) Implementar verificación de incompatibilidades con matriz (singleton?)

(Ignacio) Cálculo de costo (estimar usando el seguro)

(Ignacio) Crear lectura de datos actualizada

(Daniel e Ignacio) Implementar red neuronal como predictor

(Ignacio e Irri) Testear implementación

(Irri) Analizar performance (perf)

(Irri) Implementar baseline (greedy x distancia)

Usar argumentos de consola?
  Tipo de greedy a usar
  Tiempo de exploración de búsqueda local
  Estrategia por afinidad o round robin
  Número de hebras?

(Opcional?) Paralelizar búsqueda de soluciones

meta en un mundo de bilz y pap: 1 segundo para llegar al óptimo global :)


- implementar determinarTiempoInicial
- implementar determinarTiempoLlegada
- Inicializar predictor y table en Solver.hpp


DOING:


DONE:
- Inicializar hCiudades
- implementar salidas de output
- implementar calcularPrioridad y perturbarOrden
- implementar esAereo y esChinook

- Crear archivo de configuraciones donde poner: -predictor por default, solver por default
- Crear lectura de configuraciones default


DUDAS:
- Donde seteamos cual predictor se utiliza?
- Donde podemos acceder al predictor?


HACER:
- Crear lectura de rendimientos (Aca tenemos una cosa de concepto. TEnemos que definir que hacer para ingresar los rendimientos!!)
- Actualizar código para que utilice los costos de transporte y costos de rodal en el código
- Agregar verbose donde corresponda para debbugear
- Actualizar unordered_map de Calculos para que sea par de Recurso (id) e Incendio?